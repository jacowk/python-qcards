summary|front_content|back_content
Behavioral Patterns|Chain of Responsibility (223)|Avoid coupling the sender of a request to it's receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.
Behavioral Patterns|Command (233)|Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.
Behavioral Patterns|Interpreter (243)|Given a language, define a representation for it's grammar along with an interpreter that uses the representation to interpret sentences in the language.
Behavioral Patterns|Iterator (257)|Provide a way to access the elements of an aggregate object sequentially without exposing it's underlying representation.
Behavioral Patterns|Mediator (273)|Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and lets you vary their interaction independently.
Behavioral Patterns|Memento (283)|Without violating encapsulation, capture and externalize an object's internal state, so that the object can be restored to this state later.
Behavioral Patterns|Observer (293)|Define a one-to-many dependency between objects so that when one object changes state, all it's dependents are notified and updated automatically.
Behavioral Patterns|State (305)|Allow an object to alter it's behaviour when it's internal state changes. The object will appear to change it's class.
Behavioral Patterns|Stragety (315)|Define a family of algorithms, encapsulate each one, and make them interchangeable. Stragegy lets the algorithm vary independently from clients tha use it.
Behavioral Patterns|Template Method (325)|Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template method lets subclasses redefine certain steps of an algorithm, without changing the algorithm's stucture.
Behavioral Patterns|Visitor (331)|Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation, without changing the classes of the elements on which it operates.
